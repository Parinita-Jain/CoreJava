Object - Oriented Programming

Procedural Programming
Here we write the procedure/functions on how to get the things done.

OOP
Here we will take into consideration not just how the things are done but also the data involved in the functionality. Functionality will vary as per the data.

The main advantage of the OOPs are:
1. Breaking the program in the smaller parts(objects), separation of the concerns.
2. Hiding the data and the functionality of the system.

Features of OOPs:
1. Object
2. Class
3. Inheritance (extends/implements)
4. Polymorphism (static => overloading / dynamic => overriding)
5. Encapsulation (access modifier, public methods)
6. Abstraction (abstract class / interface)

------------------------------------------------------
Object is a real world entity.

Each object will have:
1. state
2. behaviour

Person1 ===> me
name: ekwinder
age: 34
phone: 8495649568
email: ek@gmail.com
eat()
sleep()
walk()

Person2 ===> you
name: sweta
age: 20
phone: 9468845784
email: sweta@gmail.com
eat()
sleep()
walk()

Person3 ===> you
name: lakhan
age: 21
phone: 4598748570
email: lakhan@gmail.com
eat()
sleep()
walk()

Conceptually we will think of the solution from the object perspective but while actually programming / implementing that solution we will create a blueprint of these objects known as CLASS in OOPs.

Class: Is a template, blueprint of the object

Object: Is created from the class, you can create any number of objects from the class. Object are also known as instance(example). The process of creating the object from the class is known as instantiation.

OOP is focused on reusable code. We will define only class which is replicated for each object. This concept is known as DRY (Don't Repeat Yourself).

-----------------------------------------------------
Create the class

Syntax:
class ClassName{
		//state (variables/attributes)
		//behaviour (functions/methods)
}

variable ==> store the data
function ==> perform some operation on this data

Conventions (they some standard agreed upon by the programmer to make programming easy and understandable, convention are not rule that has to followed)

1. For naming the class, we use PascalCase where first letter of each word in the class name is in uppercase and rest all letters are in lowercase

class StudentProject

2. For naming the variables and functions of the class, we use camelCase where first word is completely in lowercase and from second word onward we follow PascalCase

void getMarks()
void getTotalScore()

int dateOfBirth;

--------------------------------------------------------
Create the object

ClassName objectvariable = new ClassName();

new ClassName() ===> this statement will actually create the object in the memory.

objectvariable ===> will be used to identify the object. 

int a = 10;

eg.

Person p1 = new Person();
Person p2 = new Person();

new Person(); ===> if only this statement is written without associating it with the objectvariable then this object cannot be used again in the program.

Person p1 ===> p1 is the variable that will identify some object of the class Person because its datatype has been specified as Person

If we want to refer the state and the behaviour of the class, we will be using objectvariable that is identifying the object followed by a period(.) and then the state or behaviour required.

-------------------------------------------------
Methods/Functions

Divide the complex program in the smaller chunks using methods which are also reused.

How Method works:

1. Declare the method

Syntax:
access_specifier return_type  method_name(parameters) ==> method signature
{
	code block
}

In a class, method is declared along with the body (implementation), code block. This code block we will executed when the method is called.

parameter are optional, a method can have zero or more parameters. While declaring the method, we specify the number of parameter and the datatype of each parameter. While calling the method, the values has to be passed to each parameter declared and the value that will be passed should be of the same datatype as declared.

return_type specifies the type of the value that the method will return to the caller. If the return_type is specified as void, then the method will not return anything to the caller.

If the return_type is specifies as any other datatype, then the method has to return the value to the caller based on this type using return statement.

return statement will return the value to the caller and also the control of the execution back to the caller. This statement should be written as the last statement of the method body.

2. Call the method

Syntax:

objectvariable.method_name(arguments)

if parameter are defined with the method, then the values will have to be passed to the method as the arguments

When the method is called, the current method execution will be paused and the control be passed to the called method. After the code block of the called method is executed completely, the call will return back to the caller method and the remaining statements of the current method will be completed.

------------------------------------------------------------------
Variable Length Argument(VarArgs)

If we want to pass multiple values to the method, we can create an array, fill the array and then pass this array as the argument. The method that will accept this array should have been defined with the array parameter.

We can also pas multiple values by declaring the parameter of the method as varargs parameter using three periods (...) with the datatype of the parameter. Here the array is created for these arbitrary values implicitly.

-----------------------------------------------------------------
Polymorphism (poly ==> many, morph ==> forms)

Types of Polymorphism:
1. Static/Compile-Time Polymorphism ==> method overloading/constructor loading
2. Dynamic/Runtime Polymorphism ==> method overriding & inheritance

Method Overloading
Giving the method name more than one form. Meaning we can define the methods with same name but different parameter list.

display(int)   ===> display(8)
display(float) ===> display(56.45f)
display(String) ==> display("hello")

Here I can say, display method is overloaded.

Method will be called overloaded if it follows following rules:
1. Methodname should be same.
2. Parameter datatype is different even if the number of parameter is same.
	int,int
	float,float
	char,char
3. Just changing the return type will not make the method overloaded.
4. Parameter number is different
	int,int
	int,int,int
5. Sequence of the datatype of the parameter can be changed.
	int,float
	float,int
 
Method overloading is called compile-time polymorphism because the method linking is done at the compile time by compiler and same method is called at the runtime, no change are done by the JVM.

---------------------------------------------------
Constructor

Is a special method that is called when the object of the class is created.

new ClassName(); ===> its a call to the constructor

Constructor will same name as that of the class it is declared for and will not have the return-type.

class Student{
	Student(){}
}

There are three types of the constructors that can exists within the clas in java:
1. Default Constructor: If we, programmers don't declare any constructor for the class, the compiler will create the constructor for this class. The constructor created by compiler is no-arg/zero parameter constructor. This constructor will initialize the uninitialized variables of the class with the default values.  

					default value
boolean				false
byte,short,int		0
long				0L
float				0.0f
double				0.0d
char				'\u0000'
String, Object		null

Programmer can also declare the constructor of the following two types. When the programmer declares the constructor, the default constructor will not be created by the compiler. 
 
2. No-arg Constructor:
Is declared by programmer that takes no arguments.

3. Parameterized Contructor:
Is declared by programmer that takes one or more arguments

-----------------------------------------------------
Constructor Overloading

Just like method overloading where the method name is same but the parameter list is different, we can also overload the constructor of the class where we can declare multiple constructors but with different parameter list.

-----------------------------------------------------
this keyword
Refers to the current object

1. Calling one constructor from the another constructor in the same class. But make sure that this call is the first statement of the caller constructor.
2. If the constructor or method parameter names are same as that of the class variable, we can use this keyword to distinguish between the class variable and parameter name by applying this keyword to the class variable.
3. Can also be used to call the method of the same class.

----------------------------------------------------
Modifier:
Special keyword that can be associated with the class, variables, methods or constructor to give them meaning.

Types of modifiers:
1. Access modifiers: Used to set the access level of the class, variable, method or constructor

	default: this is just a access level that will be assigned if no other access modifier is used. the elements of the default access level as accessible only within the same package.

	public: accessible to all. in single .java file we cannot define multiple public classes. for each public class there should its own .java file.

main classes cannot be defined as private or protected

	private: accessible only within the class that it is declared in.
	protected: by default, protected members are accessible within the same package just like default. protected members can be accessible in the different package if the class in the package is inheriting this class containing protected members.

private ---> default ---> protected ---> public 

only within the class ---> only within the same package ---> only within the same package + different package if inherited ---> all

2. Non-access modifiers:
	static
	final
	abstract
	transient (serialization)
	synchronized (thread)

-----------------------------------------------------
Packages

Container/Folder the group the related types (class/interface)

Types of Package:
1. Builtin packages
2. User-defined packages

User-defined Package:
define package as the first statement of the .java file. So that when the code is compiled, a folder with the package is created if it doesn't exists or the same folder is used, and now .class file will be placed in this folder

Syntax:
package packagename;

package basic;

package com.itvedant.student;
package com.itvedant.faculty;

While naming the package we follow the convention wherein all the letters of the packagename has to be in lowercase.

Use the class files of the package in another package:
Using import statement we can import the entire package or specific class or interface from the package.

Import entire package:
import com.itvedant.student.*;
This statement will import all the classes and interfaces in the student package

Import specific classes/interfaces
import com.itvedant.student.Student;
This statement will import only Student class from the package

------------------------------------------------------------
static modifier

Used with variables and method, but not with class. Can be used with the class, if the class is the nested class.

Static attributes and methods are accessible without creating the instance/object of the class. They are common for all the object if created. They are accessed using the class reference.

If we want to access the static members in the different class then we use the classname as the reference, but if we want to access the static members from the same class then we can skip the classname reference and can directly access the static members.

Static method can access static variable/method directly but in order to access non-static variable/method we have to create the object and access it.

----------------------------------------------------
Dynamic Memory Allocation
Heap space is used for dynamic memory allocation for Java object. New objects are always created in the heap spaces and the references to this objects are stored in the stack memory. 

Garbage Collection
A application executed by JVM to clear the heap memory of the unreferred objects. This process is called garbage collection process done by garbage collector. It makes sure that the heap memory has as much free space as possible.

This process helps JVM to determine which memory is no longer being used anf to recycle this memory for other uses. When we run any program JVM also execute a method gc() to start the garbage collection.

Finalize() method
The java.lang.Object.Finalize() method is called by the garbage collector on the object which is to be deleted from the memory. This method is also know as the destructor method in Java. We can add deinitialization code in this method.










